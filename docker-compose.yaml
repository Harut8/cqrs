version: "3.11"
services:
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    user: root


  grafana:
      image: grafana/grafana
      container_name: grafana
      restart: unless-stopped
      depends_on:
        - prometheus
      ports:
        - 3000:3000
      volumes:
        - ./grafana/provisioning:/etc/grafana/provisioning
      env_file:
        - ./grafana/config.monitoring
      user: root
  auth-service:
    container_name: ai_documents-service
    build:
      context: .
      dockerfile: app.Dockerfile
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 --workers 3
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      postgres-service:
        condition: service_healthy
      rabbitmq-service:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose -O /dev/null --tries=1 http://localhost:8000/health-check || exit 1
      interval: 10s
      start_period: 3s

  postgres-service:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    container_name: postgres-service
    restart: always
    volumes:
      - postgres_vector_store:/var/lib/postgresql/data/
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 2s
      timeout: 2s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-service:5432/${POSTGRES_DB}?sslmode=disable"
    links:
      - postgres-service
      - prometheus

  rabbitmq-service:
    image: rabbitmq:3.8-management
    container_name: rabbitmq-service
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 2s
      timeout: 2s
      retries: 5

  redis-service:
    image: redis:alpine
    container_name: redis-service
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: redis-cli ping
      interval: 2s
      timeout: 2s
      retries: 5

  celery-worker:
    build:
      context: .
      dockerfile: celery.Dockerfile
    container_name: celery-worker
    restart: always
    depends_on:
      - rabbitmq-service
      - redis-service
      - postgres-service

  flower:
    image: mher/flower
    container_name: flower
    restart: always
    environment:
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq-service:5672
      CELERY_RESULT_BACKEND: redis://redis-service:6379
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq-service
      - redis-service




volumes:
  postgres_vector_store:
  auth_service:
  prometheus_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./prometheus_data
  grafana_data:
      driver: local
      driver_opts:
        o: bind
        type: none
        device: ./grafana_data
